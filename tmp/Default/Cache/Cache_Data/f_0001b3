/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/web_src/js/cookie_banner.js":
/*!*****************************************!*\
  !*** ./app/web_src/js/cookie_banner.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var config = __webpack_require__(/*! ../../../config */ "./config.js");

window.cookie_banner_init = function (params) {
  requestBanner(params.ip, params.locale, params.user_slug, params.cookie_consent);
};

function setCookie(name, value, days) {
  var expires = "";

  if (days) {
    var date = new Date();
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = "; expires=" + date.toUTCString();
  }

  document.cookie = name + "=" + (value || "") + expires + "; path=/";
}

function getCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');

  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];

    while (c.charAt(0) == ' ') {
      c = c.substring(1, c.length);
    }

    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
  }

  return null;
}
/*function getCookie(name) {
    let value = "; " + document.cookie;
    let parts = value.split("; " + name + "=");
    if (parts.length === 2) return parts.pop().split(";").shift();
}*/


function requestBanner(ip, locale, user_slug, cookie_consent) {
  $.ajax({
    url: config.api_url + "/getCookieBanner",
    type: 'get',
    data: {
      ip: ip,
      locale: locale,
      cookie_consent: cookie_consent
    },
    success: function success(data) {
      if (typeof data.error !== 'undefined') {
        console.log("API error", data.error);
        return;
      }

      if (typeof data.banner !== 'undefined' && typeof data.isInEU !== 'undefined') {
        $('head').append('<link rel="stylesheet" href="' + config.api_url + '/css/cookie_banner.css" />');
        $('body').append(data.banner);
        $('.js_agree').click(function (e) {
          $('.cookie-banner').hide();
          var till = new Date().getTime() / 1000 + 60 * 60 * 24 * 335;

          if (typeof user_slug !== 'undefined' && user_slug !== "") {
            agreeBanner(1, user_slug, till, function () {
              setCookie('CookieConsent_' + locale, "1|" + till, 335);
            });
          } else {
            setCookie('CookieConsent_' + locale, "1|" + till, 335);
          }
        });
        $('.js_disagree').click(function (e) {
          $('.cookie-banner').hide();
          var till = new Date().getTime() / 1000 + 60 * 60 * 24 * 30;

          if (typeof user_slug !== 'undefined' && user_slug !== "") {
            agreeBanner(2, user_slug, till, function () {
              setCookie('CookieConsent_' + locale, "2|" + till, 30);
            });
          } else {
            setCookie('CookieConsent_' + locale, "2|" + till, 30);
          }
        });
      }
    },
    error: function error(err) {
      console.error("API request error", err);
    }
  });
}

function agreeBanner(consent, user_slug, till, callback) {
  $.ajax({
    url: config.api_url + "/setCookieBannerAgree",
    type: 'get',
    data: {
      consent: consent,
      user_slug: user_slug,
      till: till
    },
    success: function success() {
      callback();
    },
    error: function error(err) {
      console.error("API request error", err);
    }
  });
}

/***/ }),

/***/ "./config.js":
/*!*******************!*\
  !*** ./config.js ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  api_url: "https://api.3dsky.org"
};

/***/ }),

/***/ 0:
/*!***********************************************!*\
  !*** multi ./app/web_src/js/cookie_banner.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./app/web_src/js/cookie_banner.js */"./app/web_src/js/cookie_banner.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,